
springfox.documentation.swagger.v2.path=/api/docs

DtoTestimonio.name = Nombre del Testimonio
DtoTestimonio.content = Contenido asociado al testimonio
DtoTestimonio.image = Imagen del Testimonio
testimonio.id=  Numero de Id del Testimonio 
testimonio.body.description = Datos del Testimonio a crear o actualizar


categories.api.property.id = El id de la categoria.
categories.api.property.name = El nombre de la categoria.
categories.api.property.description = La descripción de la categoria.
categories.api.property.image = La URL de la imagen de la categoria.
categories.api.property.deleted = El estado de borrado de la categoria.
categories.api.property.creation.date = La fecha de creación de la categoria.
categories.api.property.update.date = La fecha de modificación de la categoria.
categories.api.operation.allCategories = Listar todas las categorias existentes.
categories.api.operation.getCategory = Buscar una categoria a traves de su id.
categories.api.operation.updateCategories = Modificar los datos de una categoria.
categories.api.operation.addCategory = Añadir una nueva categoria.
categories.api.operation.deleteCategory = Borrar una categoria existente.
categories.api.param.getCategory = ID de la categoria que quiere retornar.
categories.api.param.deleteCategory = ID de la categoria que quiere borrar.

newsController.create = Crear novedades
newsController.delete = Eliminar novedades por id
newsController.update=Actualizar novedades por id
newsController.search=Buscar novedades por id
newsController.pag=Paginación de novedades
newsController.pag.note=Este método se usa para la paginacion de las novedades
newsModel.id=La base de datos genera de forma automática el ID de las novedades
newsModel.name=Nombre de novedades
newsModel.content=Contenido de novedades
newsModel.image=Url de la imagen de novedades
newsModel.categories=Categoria de novedades
newsModel.deleted=Borrado lógico de novedades
newsModel.createDate=Fecha de creación de novedades
newsModel.updateDate=Fecha de modificación de novedades
newsModel.updateId=ID de la categoria a modificar
auth.api= Enpoint de autenticacion e informacion de usuario. 
auth.api.description= Enpoint de autenticacion e informacion de usuario. 
auth.operation.login=Login de usuario
auth.operation.register=Registro de nuevo usuario
auth.operation.me= Informacion del usuasrio registrado actualmente
auth.model.password = Password del usuario 
auth.model.username= El email del usuario funciona como username 
auth.model.firstname= Nombre del usuario
auth.model.lastname= Apellido del usuairo
auth.model.mailregister= Mail para registrarse del usuario, que despues usara como username
auth.model.passwordregister= Password para registrarse del usuario 
auth.model.orgid= Numero de organizacion a la cual pertenece el usuario
auth.model.roleid= Rol del usuario, no es requerido por defecto se registra con Role USER
auth.body.loginuser= Datos del nuevo usuario a ingresar, email y password
auth.body.register= Datos del nuevo usuario a registrarse. 
ath.path.me= Usuario a mostrar los datos

membersModel.id= Id del miembro
membersModel.name = Nombre del miembro
membersModel.facebookUrl= Link de facebook del miembro
membersModel.instagramUrl= Link de intragram del miembro
membersModel.linkedinUrl = Link de linkedin del miembro
membersModel.image = Imagen del miembro
membersModel.description= Descripcion del miembro
membersModel.regdate= Fecha de creacion del miembro
membersModel.updatedate= Fecha actualizacion del miembro
membersModel.deleted= Borrado logico del miembro
membersModel.organization= Id de la organizacion a la que pertenece el miembro

memberController.create= Crear nuevo miembro
memberController.allMember= Listar todos los miembros
memberController.delete= Borrar un miembro existente
memberController.update= Actualizar un miembro